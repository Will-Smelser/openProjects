<!DOCTYPE html>
<html>
<head>
    <title>Example of HTML forms</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
</head>

<body>
<form name="myform" id="myform">
    <input type="text" name="sometext"/>
    <div>test</div>
    <input name="other"/>

        <legend>What is Your Favorite Pet?</legend>
        <input type="checkbox" name="animal[]" value="Cat" />Cats <br />
        <input type="checkbox" name="animal[]" value="Dog" />Dogs<br />
        <input type="checkbox" name="animal[]" value="Bird" />Birds<br />
        <input type="submit" value="Submit now" />

</form>



<script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"></script>
<script>
    var data = {"sometext":"hello","other":"","animal[]":false,"undefined":"Submit now"};
    (function( $ ){
        var regex = /^(?:input|select|textarea|keygen)/i;
        function Forms(config){
            var debug = (config && config.debug) ? config.debug : false ;
            var result = {
                _itrForm : function($form, cb){
                    var name = $form.attr('name');
                    if(document.forms[name]){
                        for(var i=0; i<document.forms[name].length; i++){
                            var $el = $(document.forms[name].elements[i]);
                            cb($el);
                        }
                    }
                },
                fill : function($form,json){
                    var self = this;

                    this._itrForm($form,function($el){
                        self.getHandler($el,self.in.handlers).call(self.in.handlers, $el, json);
                    });
                },
                extract : function($form){
                    var self = this;
                    var result = {};

                    this._itrForm($form,function($el){
                        if(!$el.attr('name')) return; //skip elements without a name
                        self.getHandler($el,self.out.handlers).call(self.out.handlers,$el, null, result);
                    });
                    return result;
                },
                //user defined filters and handlers
                in : {
                    filters : {},
                    handlers : {}
                },
                out : {
                    filters : {
                        form_date : function($el){

                        }
                    },
                    handlers : {}
                },

                getFilterList : function($el, dir){
                    var filters = [];
                    var css = $el.attr('class');
                    for(var name in css.split(" ")){
                        if(this[dir].filters[name]){
                            filters.push(this[dir].filters[name]);
                        }
                    }
                    return filters;
                },
                getHandler : function($el,scope){
                    var name = $el.prop('tagName').toLowerCase();
                    var handler;

                    switch(name){
                        case 'select':
                            handler = scope.select; break;
                        case 'textarea':
                            handler = scope.textarea; break;
                        case 'input':
                            switch($el.prop('type').toLowerCase()){
                                case 'radio':
                                    handler = scope['input-radio']; break;
                                case 'checkbox':
                                    handler = scope['input-checkbox']; break;
                                default:
                                    handler = scope['input-text']; break;
                            }
                            break;
                        default:
                            if(debug) console.log("Unmatched form elment: "+name);
                            handler = scope['_none'];

                    }

                    //we have the handler, but apply filters
                    return handler;
                },
                //default handlers
                _handlers : {
                    _none : function(){},
                    _text : function($el,json,result){
                        if(json){
                            $el.val(json[$el.attr("name")])
                        }else{
                            result[$el.attr('name')] =  $el.val();
                        }
                    },
                    _check : function($el,json,result){
                        //in
                        if(json){
                            var val = json[$el.attr("name")];
                            $el.prop('checked',(val && (val === true || val == 1 || val === "true")));
                        //out
                        }else{
                            result[$el.attr('name')] =  $el.is(':checked');
                        }
                    },
                    'input-hidden' : function($el,json,result){ return this._text($el,json,result)},
                    'input-text' : function($el,json,result){ return this._text($el,json,result)},
                    'textarea' : function($el,json,result){ return this._text($el,json,result)},
                    'input-checkbox' : function($el,json,result){ return this._check($el,json,result)},
                    'input-radio' : function($el,json,result){ return this._check($el,json,result)},
                    'select' : function($el,json,result){
                        //in
                        if(json){
                            $el.children('option').each(function(){
                                $(this).prop('checked',(json[$(this).attr("name")]));
                            });
                        //out
                        }else{
                            $el.children('option').each(function(){
                                result[$(this).attr("name")] = $(this).is("checked");
                            });
                        }
                    }
                }
            };

            //add pointers to _handlers in user defined handlers for in/out
            for(var x in result._handlers){
                result.in.handlers[x] = result._handlers[x];
                result.out.handlers[x] = result._handlers[x];
            }

            return result;
        }
        jQuery.fn.forms = function(options,json){
            //do config stuff

            var form = new Forms();

            var result = {};

            //all the elements from jquery selector, expecting "form" tags
            this.each(function(index,el){
                if(options === "extract"){
                    $.extend(result,form.extract($(el)));
                } else if(options === "fill"){
                    form.fill($(el),json);
                }
            });

            if(options === "extract"){
                return result;
            }

            return this;
        }
    })(jQuery );

</script>
</body>

</html>